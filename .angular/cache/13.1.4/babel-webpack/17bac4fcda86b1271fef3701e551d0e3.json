{"ast":null,"code":"import { ɵɵdefineInjectable, Injectable, EventEmitter, ElementRef, Input, Output, HostListener, Directive, NgModule } from '@angular/core';\nimport { saveAs } from 'file-saver';\nimport { HttpParams, HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nlet FileSaverService = class FileSaverService {\n  get isFileSaverSupported() {\n    try {\n      return !!new Blob();\n    } catch (e) {\n      return false;\n    }\n  }\n\n  genType(fileName) {\n    if (!fileName || fileName.lastIndexOf('.') === -1) {\n      return 'text/plain';\n    }\n\n    const type = fileName.substr(fileName.lastIndexOf('.') + 1);\n\n    switch (type) {\n      case 'txt':\n        return 'text/plain';\n\n      case 'xml':\n      case 'html':\n        return `text/${type}`;\n\n      case 'json':\n        return 'octet/stream';\n\n      default:\n        return `application/${type}`;\n    }\n  }\n\n  save(blob, fileName, filtType, option) {\n    if (!blob) {\n      throw new Error('Data argument should be a blob instance');\n    }\n\n    const file = new Blob([blob], {\n      type: filtType || blob.type || this.genType(fileName)\n    });\n    saveAs(file, decodeURI(fileName || 'download'), option);\n  }\n\n  saveText(txt, fileName, option) {\n    const blob = new Blob([txt]);\n    this.save(blob, fileName, null, option);\n  }\n\n};\n\nFileSaverService.ɵfac = function FileSaverService_Factory(t) {\n  return new (t || FileSaverService)();\n};\n\nFileSaverService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FileSaverService,\n  factory: function (t) {\n    return FileSaverService.ɵfac(t);\n  },\n  providedIn: 'root'\n});\nFileSaverService.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function FileSaverService_Factory() {\n    return new FileSaverService();\n  },\n  token: FileSaverService,\n  providedIn: \"root\"\n});\n\nvar __decorate$1 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nlet FileSaverDirective = /*#__PURE__*/(() => {\n  let FileSaverDirective = class FileSaverDirective {\n    constructor(el, fss, httpClient) {\n      this.el = el;\n      this.fss = fss;\n      this.httpClient = httpClient;\n      this.method = 'GET';\n      this.success = new EventEmitter();\n      this.error = new EventEmitter();\n\n      if (!fss.isFileSaverSupported) {\n        el.nativeElement.classList.add(`filesaver__not-support`);\n      }\n    }\n\n    getName(res) {\n      return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));\n    }\n\n    _click() {\n      if (!this.fss.isFileSaverSupported) {\n        return;\n      }\n\n      let req = this.http;\n\n      if (!req) {\n        const params = new HttpParams();\n        const query = this.query || {}; // tslint:disable-next-line:forin\n\n        for (const item in query) {\n          params.set(item, query[item]);\n        }\n\n        req = this.httpClient.request(this.method, this.url, {\n          observe: 'response',\n          responseType: 'blob',\n          headers: this.header,\n          params\n        });\n      }\n\n      this.setDisabled(true);\n      req.subscribe(res => {\n        if (res.status !== 200 || res.body.size <= 0) {\n          this.error.emit(res);\n          return;\n        }\n\n        this.fss.save(res.body, this.getName(res), null, this.fsOptions);\n        this.success.emit(res);\n      }, err => this.error.emit(err), () => this.setDisabled(false));\n    }\n\n    setDisabled(status) {\n      const el = this.el.nativeElement;\n      el.disabled = status;\n      el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);\n    }\n\n  };\n\n  FileSaverDirective.ɵfac = function FileSaverDirective_Factory(t) {\n    return new (t || FileSaverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FileSaverService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HttpClient));\n  };\n\n  FileSaverDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FileSaverDirective,\n    selectors: [[\"\", \"fileSaver\", \"\"]],\n    hostBindings: function FileSaverDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function FileSaverDirective_click_HostBindingHandler() {\n          return ctx._click();\n        });\n      }\n    },\n    inputs: {\n      method: \"method\",\n      http: \"http\",\n      query: \"query\",\n      header: \"header\",\n      url: \"url\",\n      fileName: \"fileName\",\n      fsOptions: \"fsOptions\"\n    },\n    outputs: {\n      success: \"success\",\n      error: \"error\"\n    },\n    exportAs: [\"fileSaver\"]\n  });\n  return FileSaverDirective;\n})();\n\n__decorate$1([Input(), __metadata(\"design:type\", Object)], FileSaverDirective.prototype, \"method\", void 0);\n\n__decorate$1([Input(), __metadata(\"design:type\", Observable)], FileSaverDirective.prototype, \"http\", void 0);\n\n__decorate$1([Input(), __metadata(\"design:type\", Object)], FileSaverDirective.prototype, \"query\", void 0);\n\n__decorate$1([Input(), __metadata(\"design:type\", Object)], FileSaverDirective.prototype, \"header\", void 0);\n\n__decorate$1([Input(), __metadata(\"design:type\", String)], FileSaverDirective.prototype, \"url\", void 0);\n\n__decorate$1([Input(), __metadata(\"design:type\", String)], FileSaverDirective.prototype, \"fileName\", void 0);\n\n__decorate$1([Input(), __metadata(\"design:type\", Object)], FileSaverDirective.prototype, \"fsOptions\", void 0);\n\n__decorate$1([Output(), __metadata(\"design:type\", Object)], FileSaverDirective.prototype, \"success\", void 0);\n\n__decorate$1([Output(), __metadata(\"design:type\", Object)], FileSaverDirective.prototype, \"error\", void 0);\n\n__decorate$1([HostListener('click'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], FileSaverDirective.prototype, \"_click\", null);\n\nFileSaverDirective = __decorate$1([__metadata(\"design:paramtypes\", [ElementRef, FileSaverService, HttpClient])], FileSaverDirective);\n\nvar __decorate$2 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nlet FileSaverModule = /*#__PURE__*/(() => {\n  let FileSaverModule = class FileSaverModule {};\n\n  FileSaverModule.ɵfac = function FileSaverModule_Factory(t) {\n    return new (t || FileSaverModule)();\n  };\n\n  FileSaverModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: FileSaverModule\n  });\n  FileSaverModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return FileSaverModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FileSaverModule, {\n    declarations: [FileSaverDirective],\n    exports: [FileSaverDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FileSaverDirective, FileSaverModule, FileSaverService }; //# sourceMappingURL=ngx-filesaver.js.map","map":null,"metadata":{},"sourceType":"module"}